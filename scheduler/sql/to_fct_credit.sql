MERGE INTO dev.gold.fct_credit AS target
USING (
    SELECT 
        id, 
        (SELECT sk FROM dev.gold.dim_member WHERE id = member_id AND is_valid = True LIMIT 1) AS sk_member,
        (SELECT sk FROM dev.gold.dim_ownership WHERE home_ownership = home_ownership LIMIT 1) AS sk_ownership,
        (SELECT sk FROM dev.gold.dim_status WHERE loan_status = loan_status LIMIT 1) AS sk_status,
        (SELECT sk FROM dev.gold.dim_grade WHERE grade = grade AND sub_grade = sub_grade LIMIT 1) AS sk_grade, 
        (SELECT sk FROM dev.gold.dim_payment 
         WHERE total_pymnt = total_pymnt 
           AND total_pymnt_inv = total_pymnt_inv 
           AND last_pymnt_d = last_pymnt_d 
           AND last_pymnt_amnt = last_pymnt_amnt 
           AND next_pymnt_d = next_pymnt_d LIMIT 1) AS sk_payment, 
        loan_amnt,
        funded_amnt, 
        funded_amnt_inv, 
        term, 
        int_rate, 
        installment, 
        issue_d,
        url,  
        purpose, 
        title, 
        dti, 
        delinq_2yrs, 
        earliest_cr_line,
        inq_last_6mths, 
        mths_since_last_delinq, 
        mths_since_last_record,
        open_acc, 
        pub_rec, 
        revol_bal, 
        revol_util, 
        total_acc, 
        initial_list_status,
        out_prncp, 
        out_prncp_inv, 
        total_rec_prncp, 
        total_rec_int, 
        total_rec_late_fee,
        recoveries, 
        collection_recovery_fee, 
        last_credit_pull_d, 
        collections_12_mths_ex_med,
        mths_since_last_major_derog, 
        policy_code, 
        application_type, 
        annual_inc_joint
    FROM dev.silver.loans
) AS source
ON target.id = source.id

-- If the record exists, update it
WHEN MATCHED THEN
    UPDATE SET 
        sk_member = source.sk_member,
        sk_ownership = source.sk_ownership,
        sk_status = source.sk_status,
        sk_grade = source.sk_grade,
        sk_payment = source.sk_payment,
        loan_amnt = source.loan_amnt,
        funded_amnt = source.funded_amnt,
        funded_amnt_inv = source.funded_amnt_inv,
        term = source.term,
        int_rate = source.int_rate,
        installment = source.installment,
        issue_d = source.issue_d,
        url = source.url,
        purpose = source.purpose,
        title = source.title,
        dti = source.dti,
        delinq_2yrs = source.delinq_2yrs,
        earliest_cr_line = source.earliest_cr_line,
        inq_last_6mths = source.inq_last_6mths,
        mths_since_last_delinq = source.mths_since_last_delinq,
        mths_since_last_record = source.mths_since_last_record,
        open_acc = source.open_acc,
        pub_rec = source.pub_rec,
        revol_bal = source.revol_bal,
        revol_util = source.revol_util,
        total_acc = source.total_acc,
        initial_list_status = source.initial_list_status,
        out_prncp = source.out_prncp,
        out_prncp_inv = source.out_prncp_inv,
        total_rec_prncp = source.total_rec_prncp,
        total_rec_int = source.total_rec_int,
        total_rec_late_fee = source.total_rec_late_fee,
        recoveries = source.recoveries,
        collection_recovery_fee = source.collection_recovery_fee,
        last_credit_pull_d = source.last_credit_pull_d,
        collections_12_mths_ex_med = source.collections_12_mths_ex_med,
        mths_since_last_major_derog = source.mths_since_last_major_derog,
        policy_code = source.policy_code,
        application_type = source.application_type,
        annual_inc_joint = source.annual_inc_joint

-- If the record doesn't exist, insert it
WHEN NOT MATCHED THEN
    INSERT (
        id, 
        sk_member, 
        sk_ownership, 
        sk_status, 
        sk_grade, 
        sk_payment, 
        loan_amnt,
        funded_amnt, 
        funded_amnt_inv, 
        term, 
        int_rate, 
        installment, 
        issue_d,
        url, 
        purpose, 
        title, 
        dti, 
        delinq_2yrs, 
        earliest_cr_line,
        inq_last_6mths, 
        mths_since_last_delinq, 
        mths_since_last_record,
        open_acc, 
        pub_rec, 
        revol_bal, 
        revol_util, 
        total_acc, 
        initial_list_status,
        out_prncp, 
        out_prncp_inv, 
        total_rec_prncp, 
        total_rec_int, 
        total_rec_late_fee,
        recoveries, 
        collection_recovery_fee, 
        last_credit_pull_d, 
        collections_12_mths_ex_med,
        mths_since_last_major_derog, 
        policy_code, 
        application_type, 
        annual_inc_joint
    ) VALUES (
        source.id, 
        source.sk_member, 
        source.sk_ownership, 
        source.sk_status, 
        source.sk_grade, 
        source.sk_payment, 
        source.loan_amnt,
        source.funded_amnt, 
        source.funded_amnt_inv, 
        source.term, 
        source.int_rate, 
        source.installment, 
        source.issue_d,
        source.url, 
        source.purpose, 
        source.title, 
        source.dti, 
        source.delinq_2yrs, 
        source.earliest_cr_line,
        source.inq_last_6mths, 
        source.mths_since_last_delinq, 
        source.mths_since_last_record,
        source.open_acc, 
        source.pub_rec, 
        source.revol_bal, 
        source.revol_util, 
        source.total_acc, 
        source.initial_list_status,
        source.out_prncp, 
        source.out_prncp_inv, 
        source.total_rec_prncp, 
        source.total_rec_int, 
        source.total_rec_late_fee,
        source.recoveries, 
        source.collection_recovery_fee, 
        source.last_credit_pull_d, 
        source.collections_12_mths_ex_med,
        source.mths_since_last_major_derog, 
        source.policy_code, 
        source.application_type, 
        source.annual_inc_joint
    );
